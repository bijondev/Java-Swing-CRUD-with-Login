
import com.midtest.bkb.Dbconnection;
import com.midtest.bkb.Users;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.mindrot.jbcrypt.BCrypt;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author bbairagi01
 */
public class FrmReg extends javax.swing.JInternalFrame {

    PreparedStatement ps;
        ResultSet rs;
        boolean checkUser = false;
    /**
     * Creates new form FrmReg
     */
    public FrmReg() throws IOException {
        initComponents();
        Show_Users_In_JTable();
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }
public void Show_Users_In_JTable()
   {
    DefaultTableModel model = new DefaultTableModel();
        
        Object[] columnsName = new Object[4];
        
        columnsName[0] = "Id";
        columnsName[1] = "Name";
        columnsName[2] = "User Name";
        columnsName[3] = "Email";
        
        model.setColumnIdentifiers(columnsName);
        Statement st;
        ResultSet rs;
        ArrayList<Users> users = new ArrayList<Users>();
        Users u;
        
//       list u=new list;
        try {
            
            st = Dbconnection.getConnection().createStatement();
            rs = st.executeQuery("SELECT * FROM users");
             Object[] rowData = new Object[4];
            while(rs.next()){
                
                rowData[0] = rs.getInt("user_id");
                rowData[1] = rs.getString("name");
                rowData[2] = rs.getString("username");
                rowData[3] = rs.getString("email");
                model.addRow(rowData);
    
            }
            jTblUsersList.setModel(model); 
        } catch (Throwable ex) {
            ExceptionDialog ld = new ExceptionDialog("Unexpected System Error!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }   
       
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnSaveUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblUsersList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Add New User");
        setInheritsPopupMenu(true);
        setName(""); // NOI18N

        lblName.setText("Name");

        lblUserName.setText("User Name");

        lblEmail.setText("Email");

        lblPassword.setText("Password");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        btnSaveUser.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSaveUser.setText("Save");
        btnSaveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUserActionPerformed(evt);
            }
        });

        jTblUsersList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTblUsersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblUsersListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTblUsersList);

        jLabel1.setText("ID");

        txtUserID.setEditable(false);

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail)
                            .addComponent(lblPassword)
                            .addComponent(lblUserName)
                            .addComponent(btnNew))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSaveUser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(jLabel1))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserName)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmail)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveUser, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate)
                            .addComponent(btnNew)
                            .addComponent(btnDelete))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void btnSaveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUserActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText();
        String user_name = txtUsername.getText();
        String email = txtEmail.getText();
        //String password = txtPassword.getText();
        String password = BCrypt.hashpw(txtPassword.getText(), BCrypt.gensalt(12));
        if(user_name.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Add A Username");
        }
        else if(name.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Add A Name");
        }
        else if(email.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Add A Email");
        }
        else if(password.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Add A Password");
        }
        else if(checkUsername(user_name))
        {
            JOptionPane.showMessageDialog(null, "This Username Already Exist");
        }
        else if(checkEmail(email))
        {
            JOptionPane.showMessageDialog(null, "This Email Already Exist");
        }
        else if(!isValidEmail(email)){
            JOptionPane.showMessageDialog(null, "This Email is not valid");
        }
        else{
            String query = "INSERT INTO `users`(`username`, `name`, `email`, `password`) VALUES (?,?,?,?)";
        
        try {
            ps = Dbconnection.getConnection().prepareStatement(query);
            
            ps.setString(1, user_name);
            ps.setString(2, name);
            ps.setString(3, email);
            ps.setString(4, password);
            
            if(ps.executeUpdate() > 0)
            {
                JOptionPane.showMessageDialog(null, "New User Add");
                Show_Users_In_JTable();
            }
            
        } catch (Throwable ex) {
            //Logger.getLogger(FrmReg.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionDialog ld = new ExceptionDialog("Unexpected System Error!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }
        }
    }//GEN-LAST:event_btnSaveUserActionPerformed

    private void jTblUsersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblUsersListMouseClicked
        // TODO add your handling code here:
         int i = jTblUsersList.getSelectedRow();

        TableModel model = jTblUsersList.getModel();
        
        txtUserID.setText(model.getValueAt(i,0).toString());
        txtName.setText(model.getValueAt(i,1).toString());
        txtUsername.setText(model.getValueAt(i,2).toString());
        txtEmail.setText(model.getValueAt(i,3).toString());
        
        txtUsername.setEditable(false);
        
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        
        btnNew.setEnabled(true);
        btnSaveUser.setEnabled(false);
    }//GEN-LAST:event_jTblUsersListMouseClicked

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        txtUserID.setText("");
        txtEmail.setText("");
        txtName.setText("");
        txtPassword.setText("");
        txtUsername.setText("");
        btnSaveUser.setEnabled(true);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String user_id=txtUserID.getText();
        String name = txtName.getText();
        //String user_name = txtUsername.getText();
        String email = txtEmail.getText();
        String password = txtPassword.getText();
        //String password = BCrypt.hashpw(txtPassword.getText(), BCrypt.gensalt(12));
        if(name.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Add A Name");
        }
        else if(email.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Add A Email");
        }
        else if(checkEmailUpdate(user_id, email))
        {
            JOptionPane.showMessageDialog(null, "This Email Already Exist");
        }
        else if(!isValidEmail(email)){
            JOptionPane.showMessageDialog(null, "This Email is not valid");
        }
        else{
            String query="";
            if(password.equals("")){
                query = "UPDATE `users` SET `name` = ?, `email` = ? WHERE `user_id` = ?";
            }else{
                query = "UPDATE `users` SET `name` = ?, `email` = ?, `password` = ? WHERE `user_id` = ?";
            }
            
        
        try {
            ps = Dbconnection.getConnection().prepareStatement(query);
            
            if(!password.equals("")){
                String password2 = BCrypt.hashpw(txtPassword.getText(), BCrypt.gensalt(12));
                ps.setString(1, name);
                ps.setString(2, email); 
                ps.setString(3, password2);
                ps.setString(4, user_id);
            }else{
                ps.setString(1, name);
                ps.setString(2, email); 
                ps.setString(3, user_id);
            }
            
            if(ps.executeUpdate() > 0)
            {
                JOptionPane.showMessageDialog(null, "Update User Successfully.");
                Show_Users_In_JTable();
            }
            
        } catch (Throwable ex) {
            //Logger.getLogger(FrmReg.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionDialog ld = new ExceptionDialog("Unexpected System Error!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        String user_id=txtUserID.getText();
        String query = "delete from `users` where`user_id` = ?";
        int input = JOptionPane.showConfirmDialog(null, "Confirm Delete This User?");
        if(input==0){
        try {
            ps = Dbconnection.getConnection().prepareStatement(query);
            

                ps.setString(1, user_id);

            if(ps.executeUpdate() > 0)
            {
                JOptionPane.showMessageDialog(null, "Delete User Successfully.");
                Show_Users_In_JTable();
            }
            
        } catch (Throwable ex) {
            //Logger.getLogger(FrmReg.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionDialog ld = new ExceptionDialog("Unexpected System Error!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
// function to check if the username already exist in database table
    
    static boolean isValidEmail(String email) {
      String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
      return email.matches(regex);
   }
    
    public boolean checkEmail(String email)
    {
        PreparedStatement ps;
        ResultSet rs;
        boolean checkEmail = false;
        String query = "SELECT * FROM `users` WHERE `email` =?";
        
        try {
            ps = Dbconnection.getConnection().prepareStatement(query);
            ps.setString(1, email);
            
            rs = ps.executeQuery();
            
            if(rs.next())
            {
                checkEmail = true;
            }
        } catch (Throwable ex) {
            //Logger.getLogger(FrmReg.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionDialog ld = new ExceptionDialog("Check Email!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }
         return checkEmail;
    }
    public boolean checkEmailUpdate(String user_id, String email)
    {
        PreparedStatement ps;
        ResultSet rs;
        boolean checkEmail = false;
        String query = "SELECT * FROM `users` WHERE `email` =? and user_id !=?";
        
        try {
            ps = Dbconnection.getConnection().prepareStatement(query);
            ps.setString(1, email);
            ps.setString(2, user_id);
            
            rs = ps.executeQuery();
            
            if(rs.next())
            {
                checkEmail = true;
            }
        } catch (Throwable ex) {
            //Logger.getLogger(FrmReg.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionDialog ld = new ExceptionDialog("Check Email!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }
         return checkEmail;
    }
// function to check if the username already exist in database table
    public boolean checkUsername(String username)
    {
        PreparedStatement ps;
        ResultSet rs;
        boolean checkUser = false;
        String query = "SELECT * FROM `users` WHERE `username` =?";
        
        try {
            ps = Dbconnection.getConnection().prepareStatement(query);
            ps.setString(1, username);
            
            rs = ps.executeQuery();
            
            if(rs.next())
            {
                checkUser = true;
            }
        } catch (Throwable ex) {
            //Logger.getLogger(FrmReg.class.getName()).log(Level.SEVERE, null, ex);
            ExceptionDialog ld = new ExceptionDialog("Check User Name!", "Something hugely badly unexpectadly went awfully wrong", ex);

            ld.setVisible(true);
        }
         return checkUser;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSaveUser;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTblUsersList;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
